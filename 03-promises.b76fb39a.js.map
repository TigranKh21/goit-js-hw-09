{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GACTC,KAAKC,SAAW,GAEpCN,EAAAO,OAAOC,QAAQ,uBAAwCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,OAE7DJ,EAAAO,OAAOG,QAAQ,sBAAqCD,OAAfN,EAAS,QAAYM,OAANL,EAAM,M,CAI9D,IAAMO,EAAUC,SAASC,cAAc,kBACjCC,EAASF,SAASC,cAAc,iBAChCE,EAAWH,SAASC,cAAc,mBACtBD,SAASC,cAAc,UAE/BG,iBAAiB,SAE3B,SAAqBC,GACnBA,EAAMC,iBACN,IAAMd,EAAQe,OAAOR,EAAQS,OACvBC,EAAOF,OAAOL,EAAOM,OACrBE,EAASH,OAAOJ,EAASK,OAC3BG,EAAU,EAEdC,QAAQC,KAAI,IAAIC,MAAOC,cAEvBC,YAAW,WACTJ,QAAQC,KAAI,IAAIC,MAAOC,cACvBzB,EAAcqB,EAASnB,GACvBmB,IACAC,QAAQC,IACN,WAA4BhB,OAAjBL,EAAM,aAA6BK,OAAlBY,EAAK,eAC/BZ,OAD4Ca,EAAO,gBAEpDb,OADCc,EAAU,G,GAGbnB,GAEH,IAAMyB,EAAaC,aAAY,WAC7BN,QAAQC,KAAI,IAAIC,MAAOC,cACvBzB,EAAcqB,EAASF,GACvBE,IACAC,QAAQC,IACN,WAA4BhB,OAAjBL,EAAM,aAA6BK,OAAlBY,EAAK,eAC/BZ,OAD4Ca,EAAO,gBAEpDb,OADCc,EAAU,IAGVA,IAAYD,EAAS,GACvBS,cAAcF,E,GAEfR,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}\n\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\nconst createBtn = document.querySelector('button');\n\ncreateBtn.addEventListener('click', onCreateBtn);\n\nfunction onCreateBtn(event) {\n  event.preventDefault();\n  const delay = Number(delayEl.value);\n  const step = Number(stepEl.value);\n  const amount = Number(amountEl.value);\n  let counter = 1;\n\n  console.log(new Date().getSeconds());\n\n  setTimeout(() => {\n    console.log(new Date().getSeconds());\n    createPromise(counter, delay);\n    counter++;\n    console.log(\n      `delay = ${delay}, step = ${step}, amount = ${amount}, counter = ${\n        counter - 1\n      }`\n    );\n  }, delay);\n\n  const intervalId = setInterval(() => {\n    console.log(new Date().getSeconds());\n    createPromise(counter, step);\n    counter++;\n    console.log(\n      `delay = ${delay}, step = ${step}, amount = ${amount}, counter = ${\n        counter - 1\n      }`\n    );\n    if (counter === amount + 1) {\n      clearInterval(intervalId);\n    }\n  }, step);\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","Notify","success","concat","failure","$ce04d3a99e08e73b$var$delayEl","document","querySelector","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$amountEl","addEventListener","event","preventDefault","Number","value","step","amount","counter","console","log","Date","getSeconds","setTimeout","intervalId","setInterval","clearInterval"],"version":3,"file":"03-promises.b76fb39a.js.map"}